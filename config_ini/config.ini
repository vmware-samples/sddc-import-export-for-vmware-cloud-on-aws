[exportConfig]

# Folder to export JSON configurations into
export_folder = json

# Do you want the SDDC ID to be appended to the export filename?
# sddcid_yyyy_mm_dd_hh-mm-ss_json.export.zip
# c12fe3f4-515c-4859-ce45-2a25935ea251_2021_01_05_10-30-00_json.export.zip with the SDDC ID
# 2021_01_05_10-30-00_json.export.zip without the SDDC ID
append_sddc_id_to_zip = False

# Export compute gateway groups filename
# There is no True/False flag for this option because CGW groups are automatically exported with CGW settings
cgw_groups_filename = cgw_groups.json

# Export compute gateway settings?
cgw_export = True
cgw_export_filename = cgw.json

# Export the management gateway settings?
mgw_export = True
mgw_export_filename = mgw.json

# Export the segments configured on the default compute gateway?
network_export  = True
network_export_filename = cgw-networks.json
# Export DHCP static bindings for networks configured on the compute gateway?
# This will significantly slow down the export process, only enable this if you use
# DHCP static bindings
network_dhcp_static_binding_export = False

# Export segments attached to non-default Tier-1 gateways?
flex_segment_export = True
flex_segment_export_filename = flex_seg.json
flex_segment_disc_prof_export_filename = flex_seg_disc_prof.json

# Export the list of public IP addresses?
public_export = True
public_export_filename = public.json

# Export the NAT rules, including Public IP addresses?
nat_export = True
nat_export_filename = natrules.json

#Export VPN configuration?
vpn_export = True
t1_vpn_export = True
t1_vpn_export_filename = t1vpn.json
t1_vpn_service_filename = t1vpn_service.json
t1_vpn_localendpoint_filename = t1vpn_le.json

# Export service access?
service_access_export = True

# Export the distributed firewall?
dfw_export = True
dfw_export_filename = dfw.json
dfw_detailed_export_filename = dfw_details.json

# Export the NSX advanced firewall? This setting will have no effect if the
# NSX advanced firewall add-on is not enabled in the source SDDC
nsx_adv_fw_export = True
nsx_adv_fw_settings_export_filename = nsx_adv_fw_settings.json
nsx_adv_fw_sigs_export_filename = nsx_adv_fw_sigs.json
nsx_adv_fw_profiles_export_filename = nsx_adv_fw_profiles.json
nsx_adv_fw_policies_export_filename = nsx_adv_fw_policies.json
nsx_adv_fw_rules_export_filename = nsx_adv_fw_rules.json

# Export the NSX Layer7 Context Profiles.
nsx_l7_fqdn_export = True
nsx_l7_fqdn_filename = nsx_l7_fqdn.json
nsx_l7_context_profile_export = True
nsx_l7_context_profile_filename = nsx_l7_context_profile.json

# Export the multiple tier-1 gateway configuration and firewall rules.  Feature added with M18.
mcgw_export = True
mcgw_export_filename = mcgw.json
mcgw_fw_export = True
mcgw_fw_export_filename = mcgw_fw.json
mcgw_static_routes_export = True
mcgw_static_routes_export_filename = mcgw_static_routes.json

# Export Connected VPC Managed Prefix List configuration
mpl_export = True
mpl_export_filename = mpl.json

# Export route aggregation lists and route configuration
ral_export = True
ral_export_filename = ral.json
route_config_export = True
route_config_export_filename = route_config.json

# Filename for SDDC info - the base SDDC congfiguration from /vmc/api/orgs/*/sddc
sddc_info_filename = sddc_info.json
# If True, this will hide sensitive SDDC data like cloud_password
sddc_info_hide_sensitive_data = True

# Keep previous versions of the exported JSON files?
export_history = False
# If export_history is set to True, how many previous zip files to keep before deleting the oldest file? -1 for unlimited
max_export_history_files = 10
# If export_history is true, do you want to purge the exported JSON files after they are zipped into the archive?
export_purge_after_zip = False

#Export Mode
# export_type = os
#    - Export files will be written to the OS where Python is running
# export_type = s3
#    - Export files will be written to an S3 bucket as well as to the OS. Make sure to configure the [awsConfig] section of aws.ini
export_type = os

# Purge any previously exported JSON files before a new export is run?
export_purge_before_run = True

# vCenter Export Options
# Must configure vcenter.ini
export_vcenter_folders = False
export_vcenter_categories = False
export_vcenter_tags = False

# CSP Role sync options
# The source user - the template user account with roles that need to be synced to other user accounts
role_sync_source_user_email =


[importConfig]

# Set this to True if you want to do continuous sync operations i.e. a periodic sync of
# DFW rules from a source to a destination SDDC. The default method of import operations 
# is a PUT. Setting this flag to True changes the method to a PATCH
# Not all settings are supported for sync - public IP and NAT mapping are unsupported
sync_mode = False

# Folder to import JSON configurations from
import_folder = json

# Import mode
# import_mode = test
#  - No changes will be made to the destination SDDC
#
# import_mode = live
#  - Changes will be made to the destination SDDC
import_mode = test

# Script will warn, ask for a confirmation before continuing in live mode
# Set this to false if you are absolutely sure you have your script configured correctly and want to run it automatically
import_mode_live_warning = True

# Script will attempt to enable IPv6 on the destination SDDC if it was enabled on the source SDDC
enable_ipv6 = True

# Rename clusters to name set in source SDDC
rename_clusters = True

# Import services? Only disable this if you truly know what you are doing.
# Firewall groups are dependent on Services. If you skip Services, Groups that are
# dependent on those services will fail to import
services_import = True

# Import groups? Only disable this if you truly know what you are doing.
# Firewall rules are dependent on Groups. If you skip Groups, Firewall rules
# dependent on those groups will fail to import. Both CGW and DFW rules are dependent
# on Compute Groups
compute_groups_import = True
management_groups_import = True

# Import compute gateway settings?
cgw_import = True
cgw_groups_filename = cgw_groups.json
cgw_import_filename = cgw.json
# Python regex match on CGW group display name, pipe-delimited. See README for examples.
cgw_groups_import_exclude_list =
# Python regex match on CGW rule display name, pipe-delimited. See README for examples.
cgw_import_exclude_list =

# Import the management gateway settings?
mgw_import = True
mgw_groups_filename = mgw_groups.json
mgw_import_filename = mgw.json
# Python regex match on MGW group display name, pipe-delimited. See README for examples.
mgw_groups_import_exclude_list =
# Python regex match on MGW rule display name, pipe-delimited. See README for examples.
mgw_import_exclude_list =

# Import additional Tier-1 Gateways and Firewall Policy/Rules?
mcgw_import = True
mcgw_import_filename = mcgw.json
mcgw_static_route_import = True
mcgw_static_route_import_filename = mcgw_static_routes.json
mcgw_fw_import = True
mcgw_fw_import_filename = mcgw_fw.json

# Import Conncted VPC Managed Prefix List
mpl_import = True
mpl_import_filename = mpl.json
#Automatically accept the Resource Share.  Users must provide an AWS Access Key and Secret Access Key in the aws.ini file
automate_ram_acceptance = True
automate_vpc_route_table_programming = True

#Import Route Aggregation Lists and Route Configuration?
ral_import = True
ral_import_filename = ral.json
route_config_import = True
route_config_import_filename = route_config.json

# Import the compute gateway networks?
network_import  = True
network_import_filename = cgw-networks.json
# Python regex match on network display name, pipe-delimited. See README for examples.
network_import_exclude_list = L2E_
# Stop importing after you reach this number of networks, set to -1 for unlimited
# This setting is generally used for debugging.
network_import_max_networks = -1

# Import DHCP static bindings for CGW networks?
network_dhcp_static_binding_import = False

# Import flexible segments?
flex_segment_import = True
flex_segment_import_filename = flex_seg.json
# Python regex match on network display name, pipe-delimited. See README for examples.
flex_segment_import_exclude_list = L2E_
flex_segment_disc_prof_import_filename = flex_seg_disc_prof.json

# Import the list of public IP addresses?
public_import = True
public_import_filename = public.json
public_ip_old_new_filename = public_ip_old_new.json

# Import the NAT rules across, alongside the public IP addresses?
nat_import = True
nat_import_filename = natrules.json

# Import VPN configuration?
vpn_import = True
t1_vpn_import = True
t1_vpn_import_filename = t1vpn.json
t1_vpn_service_import_filename = t1vpn_service.json
t1_vpn_localendpoint_import_filename = t1vpn_le.json

# Automatically disable VPN tunnels when importing them
vpn_disable_on_import = True

# Import service access?
service_access_import = True

# Import the distributed firewall?
dfw_import = True
dfw_import_filename = dfw.json
dfw_detailed_import_filename = dfw_details.json

# Import the NSX advanced firewall?
# If you set nsx_adv_fw_import to true, the script will attempt to import
# NSX advanced firewall settings. The import will fail if the advanced
# firewall add-on is not enable in the destination SDDC. The script will
# automatically enable the advanced firewall addon if you set
# nsx_adv_fw_allow_enable to True
nsx_adv_fw_import = True
nsx_adv_fw_allow_enable = True
nsx_adv_fw_settings_import_filename = nsx_adv_fw_settings.json
nsx_adv_fw_sigs_import_filename = nsx_adv_fw_sigs.json
nsx_adv_fw_profiles_import_filename = nsx_adv_fw_profiles.json
nsx_adv_fw_policies_import_filename = nsx_adv_fw_policies.json
nsx_adv_fw_rules_import_filename = nsx_adv_fw_rules.json

#NSX Layer 7 import
nsx_l7_fqdn_import = True
nsx_l7_fqdn_import_filename = nsx_l7_fqdn.json
nsx_l7_context_profile_import = True
nsx_l7_context_profile_import_filename = nsx_l7_context_profile.json

# vCenter Import Options
# Must configure vcenter.ini
import_vcenter_folders = False
import_vcenter_categories = False
import_vcenter_tags = False

# CSP Role sync options
# A pipe delimited list of email addresses - these accounts will have the roles synchronized with roles attached to the source user
role_sync_dest_user_emails =
